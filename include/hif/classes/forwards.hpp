/// @file forwards.hpp
/// @brief
/// Copyright (c) 2024-2025, Electronic Systems Design (ESD) Group,
/// Univeristy of Verona.
/// This file is distributed under the BSD 2-Clause License.
/// See LICENSE.md for details.

#pragma once

#include "hif/application_utils/portability.hpp"

namespace hif
{
class Action;
class Aggregate;
class AggregateAlt;
class Alias;
class Alt;
class Array;
class Assign;
template <class T>
class BList;
class BListHost;
class BaseContents;
class Bit;
class BitValue;
class Bitvector;
class BitvectorValue;
class Bool;
class BoolValue;
class Break;
class Cast;
class Char;
class CharValue;
class CompositeType;
class Const;
class ConstValue;
class Contents;
class Continue;
class DataDeclaration;
class Declaration;
class DesignUnit;
class Entity;
class Enum;
class EnumValue;
class Event;
class Expression;
class Field;
class FieldReference;
class File;
class For;
class ForGenerate;
class Function;
class FunctionCall;
class Generate;
class GlobalAction;
class Identifier;
class If;
class IfAlt;
class IfGenerate;
class Instance;
class Int;
class IntValue;
class Library;
class LibraryDef;
class Member;
class Null;
class Transition;
class Object;
class PPAssign;
class Parameter;
class ParameterAssign;
class Pointer;
class Port;
class PortAssign;
class PrefixedReference;
class Procedure;
class ProcedureCall;
class Range;
class Real;
class RealValue;
class Record;
class RecordValue;
class RecordValueAlt;
class Reference;
class ReferencedAssign;
class ReferencedType;
class Return;
class Scope;
class ScopedType;
class Signal;
class Signed;
class SimpleType;
class Slice;
class State;
class StateTable;
class String;
class SubProgram;
class Switch;
class SwitchAlt;
class System;
class TPAssign;
class StringValue;
class Time;
class TimeValue;
class Type;
class TypeDeclaration;
class TypeDef;
class TypeReference;
class TypeTP;
class TypeTPAssign;
class TypedObject;
class Unsigned;
class Value;
class ValueStatement;
class ValueTP;
class ValueTPAssign;
class Variable;
class View;
class ViewReference;
class Wait;
class When;
class WhenAlt;
class While;
class With;
class WithAlt;
} // namespace hif
